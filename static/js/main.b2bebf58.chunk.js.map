{"version":3,"sources":["App.tsx","index.tsx"],"names":["initialArray","App","React","useState","grid","setGrid","useEffect","checkGame","gridAction","pos","newGrid","gridAfterUser","index","length","checkWho","type","user","alert","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAIMA,G,YAAe,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAwJvCC,MAtJf,WAAgB,IAAD,EACWC,IAAMC,SAAN,UAA6BH,IADxC,mBACNI,EADM,KACAC,EADA,KAGbH,IAAMI,WAAU,WACdC,EAAUH,KACT,CAACA,IAEJ,IAAMI,EAAa,SAACC,GAClB,IAAMC,EAAO,YAAON,GACpB,GAAqB,KAAjBM,EAAQD,GAAa,CACvBC,EAAQD,GAAO,IACfJ,EAAQK,GACR,IAAMC,EAAa,YAAOD,GAC1B,GAAID,EAAM,GACR,GAA+B,MAA3BE,EAAcF,EAAM,GACtBE,EAAcF,EAAM,GAAK,SAEzB,IAAK,IAAIG,EAAQ,EAAGA,EAAQD,EAAcE,OAAQD,IAChD,GAA6B,KAAzBD,EAAcC,GAAe,CAC/BD,EAAcC,GAAS,IACvB,YAKN,GAAyB,KAArBD,EAAc,GAChBA,EAAc,GAAK,SAEnB,IAAK,IAAIC,EAAQ,EAAGA,EAAQD,EAAcE,OAAQD,IAChD,GAA6B,KAAzBD,EAAcC,GAAe,CAC/BD,EAAcC,GAAS,IACvB,MAKRP,EAAQM,KAING,EAAW,SAACJ,EAAmBK,GACnC,IAAMC,EAAgB,MAATD,EAAe,OAAS,UACrC,GACEL,EAAQ,KAAOK,GACfL,EAAQ,KAAOA,EAAQ,IACvBA,EAAQ,KAAOA,EAAQ,GAIvB,OAFAO,MAAM,GAAD,OAAID,EAAJ,SACLX,EAAQ,GAAD,OAAKL,KACL,EAET,GACEU,EAAQ,KAAOK,GACfL,EAAQ,KAAOA,EAAQ,IACvBA,EAAQ,KAAOA,EAAQ,GAIvB,OAFAO,MAAM,GAAD,OAAID,EAAJ,SACLX,EAAQ,GAAD,OAAKL,KACL,EAET,IAAK,IAAIY,EAAQ,EAAGA,EAAQF,EAAQG,OAAQD,IAC1C,GAAIA,EAAQ,GAAKF,EAAQE,KAAWG,EAAM,CACxC,GACEL,EAAQE,KAAWF,EAAQE,EAAQ,IACnCF,EAAQE,KAAWF,EAAQE,EAAQ,GAInC,OAFAK,MAAM,GAAD,OAAID,EAAJ,SACLX,EAAQ,GAAD,OAAKL,KACL,EAET,GAAc,IAAVY,EAAa,CACf,GACEF,EAAQE,KAAWF,EAAQE,EAAQ,IACnCF,EAAQE,KAAWF,EAAQE,EAAQ,GAGnC,OADAK,MAAM,GAAD,OAAID,EAAJ,UACE,EAET,GACEN,EAAQE,KAAWF,EAAQE,EAAQ,IACnCF,EAAQE,KAAWF,EAAQE,EAAQ,GAInC,OAFAK,MAAM,GAAD,OAAID,EAAJ,SACLX,EAAQ,GAAD,OAAKL,KACL,EAGX,GAAc,IAAVY,GAEAF,EAAQE,KAAWF,EAAQE,EAAQ,IACnCF,EAAQE,KAAWF,EAAQE,EAAQ,GAInC,OAFAK,MAAM,GAAD,OAAID,EAAJ,SACLX,EAAQ,GAAD,OAAKL,KACL,EAKf,OAAO,GAEHO,EAAY,SAACG,GACjBI,EAASJ,EAAS,MAAQI,EAASJ,EAAS,MAG9C,OACE,yBAAKQ,UAAU,OACb,yBAAKA,UAAU,gEACb,+BACE,+BACE,4BACE,wBAAIC,QAAS,kBAAMX,EAAW,KAC5B,8BAAOJ,EAAK,KAEd,wBAAIe,QAAS,kBAAMX,EAAW,KAC5B,8BAAOJ,EAAK,KAEd,wBAAIe,QAAS,kBAAMX,EAAW,KAC5B,8BAAOJ,EAAK,MAGhB,4BACE,wBAAIe,QAAS,kBAAMX,EAAW,KAC5B,8BAAOJ,EAAK,KAEd,wBAAIe,QAAS,kBAAMX,EAAW,KAC5B,8BAAOJ,EAAK,KAEd,wBAAIe,QAAS,kBAAMX,EAAW,KAC5B,8BAAOJ,EAAK,MAGhB,4BACE,wBAAIe,QAAS,kBAAMX,EAAW,KAC5B,8BAAOJ,EAAK,KAEd,wBAAIe,QAAS,kBAAMX,EAAW,KAC5B,8BAAOJ,EAAK,KAEd,wBAAIe,QAAS,kBAAMX,EAAW,KAC5B,8BAAOJ,EAAK,WC7I5BgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.b2bebf58.chunk.js","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nconst initialArray = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n\nfunction App() {\n  const [grid, setGrid] = React.useState<string[]>([...initialArray]);\n\n  React.useEffect(() => {\n    checkGame(grid);\n  }, [grid]);\n\n  const gridAction = (pos: number) => {\n    const newGrid = [...grid];\n    if (newGrid[pos] === \"\") {\n      newGrid[pos] = \"X\";\n      setGrid(newGrid);\n      const gridAfterUser = [...newGrid];\n      if (pos < 8) {\n        if (gridAfterUser[pos + 1] !== \"X\") {\n          gridAfterUser[pos + 1] = \"O\";\n        } else {\n          for (let index = 0; index < gridAfterUser.length; index++) {\n            if (gridAfterUser[index] === \"\") {\n              gridAfterUser[index] = \"O\";\n              break;\n            }\n          }\n        }\n      } else {\n        if (gridAfterUser[0] === \"\") {\n          gridAfterUser[0] = \"O\";\n        } else {\n          for (let index = 0; index < gridAfterUser.length; index++) {\n            if (gridAfterUser[index] === \"\") {\n              gridAfterUser[index] = \"O\";\n              break;\n            }\n          }\n        }\n      }\n      setGrid(gridAfterUser);\n    }\n  };\n\n  const checkWho = (newGrid: string[], type: string) => {\n    const user = type === \"X\" ? \"User\" : \"Machine\";\n    if (\n      newGrid[3] === type &&\n      newGrid[3] === newGrid[4] &&\n      newGrid[3] === newGrid[5]\n    ) {\n      alert(`${user} WON`);\n      setGrid([...initialArray]);\n      return false;\n    }\n    if (\n      newGrid[6] === type &&\n      newGrid[6] === newGrid[7] &&\n      newGrid[6] === newGrid[8]\n    ) {\n      alert(`${user} WON`);\n      setGrid([...initialArray]);\n      return false;\n    }\n    for (let index = 0; index < newGrid.length; index++) {\n      if (index < 3 && newGrid[index] === type) {\n        if (\n          newGrid[index] === newGrid[index + 3] &&\n          newGrid[index] === newGrid[index + 6]\n        ) {\n          alert(`${user} WON`);\n          setGrid([...initialArray]);\n          return false;\n        }\n        if (index === 0) {\n          if (\n            newGrid[index] === newGrid[index + 1] &&\n            newGrid[index] === newGrid[index + 2]\n          ) {\n            alert(`${user} WON`);\n            return false;\n          }\n          if (\n            newGrid[index] === newGrid[index + 4] &&\n            newGrid[index] === newGrid[index + 8]\n          ) {\n            alert(`${user} WON`);\n            setGrid([...initialArray]);\n            return false;\n          }\n        }\n        if (index === 2) {\n          if (\n            newGrid[index] === newGrid[index + 2] &&\n            newGrid[index] === newGrid[index + 4]\n          ) {\n            alert(`${user} WON`);\n            setGrid([...initialArray]);\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  };\n  const checkGame = (newGrid: string[]) => {\n    checkWho(newGrid, \"X\") && checkWho(newGrid, \"O\");\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"d-flex justify-content-center align-items-center tic-tac-toe\">\n        <table>\n          <tbody>\n            <tr>\n              <td onClick={() => gridAction(0)}>\n                <span>{grid[0]}</span>\n              </td>\n              <td onClick={() => gridAction(1)}>\n                <span>{grid[1]}</span>\n              </td>\n              <td onClick={() => gridAction(2)}>\n                <span>{grid[2]}</span>\n              </td>\n            </tr>\n            <tr>\n              <td onClick={() => gridAction(3)}>\n                <span>{grid[3]}</span>\n              </td>\n              <td onClick={() => gridAction(4)}>\n                <span>{grid[4]}</span>\n              </td>\n              <td onClick={() => gridAction(5)}>\n                <span>{grid[5]}</span>\n              </td>\n            </tr>\n            <tr>\n              <td onClick={() => gridAction(6)}>\n                <span>{grid[6]}</span>\n              </td>\n              <td onClick={() => gridAction(7)}>\n                <span>{grid[7]}</span>\n              </td>\n              <td onClick={() => gridAction(8)}>\n                <span>{grid[8]}</span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}